{"version":3,"file":"component---src-pages-index-js-69b6c3d1d78117d07eca.js","mappings":"wNAgBMA,EAAY,WAChB,MAAQ,CACJC,EAAGC,KAAKC,MAPE,GAOID,KAAKE,UACnBC,EAAGH,KAAKC,MATE,GASID,KAAKE,YAInBE,EAAY,kBAAO,OAAIC,MAZb,KAY2BC,KAAI,SAACC,GAAD,OACtB,OAAIF,MAdb,KAc4BC,KAAI,SAACC,GAAD,MAAM,mBAEhDC,EAAe,CACnBC,KAAML,IACNM,MAAO,CAACZ,KACRa,KAAMb,IACNc,UAtBY,GAuBZC,MAAO,KAIHC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAkBJ,aAAe,IAAD,SACV,sBAIJC,UAAY,WACV,IAAIC,GAAS,OAAO,EAAKC,MAAMP,OAC3BQ,EAAI,iBAASF,EAAUA,EAAUG,OAAO,IAC5C,OAAQ,EAAKF,MAAML,WACf,KA1DM,GA0DMM,EAAKf,IAAM,EAAG,MAC1B,KA1DM,GA0DMe,EAAKnB,IAAM,EAAG,MAC1B,KA1DM,GA0DMmB,EAAKf,GAAK,EAAI,MAC1B,KA1DM,GA0DMe,EAAKnB,GAAK,EAAI,MAC1B,QAAS,OAGbmB,EAAKnB,GA3DO,KA2DSmB,EAAKnB,EAAE,IAAImB,EAAKnB,GA3DzB,KA4DZmB,EAAKf,GA3DO,KA2DQe,EAAKf,EAAE,IAAIe,EAAKf,GA3DxB,KA6DZa,EAAUI,KAAKF,GACfF,EAAUK,QACV,EAAKC,SAAS,CACVZ,MAAOM,EACPE,KAAMA,IAEV,EAAKK,UAzBO,EA8CfC,gBAAkB,YAAgB,IAAdC,EAAa,EAAbA,QACfb,EAAY,EAAKK,MAAML,UAC3B,OAAQa,GACJ,KAlGQ,GAmGJb,EAjGI,KAiGSA,EAjGT,GAFA,GAoGJ,MACJ,KAnGQ,GAoGJA,EAtGI,KAsGSA,EAtGT,GAEA,GAqGJ,MACJ,KAvGQ,GAwGJA,EAtGI,KAsGSA,EAtGT,GAFA,GAyGJ,MACJ,KAxGQ,GAyGJA,EA3GI,KA2GSA,EA3GT,GAEA,GA0GJ,MACJ,KA1GQ,GA2GJA,EA3GI,GAgHZ,EAAKU,SAAS,CACVV,UAAWA,KApED,EAgFhBc,YAAc,WAGZ,IAFA,IAAIhB,EAAQ,EAAKO,MAAMP,MACnBQ,EAAI,iBAAQR,EAAMA,EAAMS,OAAO,IAC1BQ,EAAE,EAAGA,EAAEjB,EAAMS,OAAO,EAAGQ,IACvBT,EAAKnB,IAAMW,EAAMiB,GAAG5B,GAAMmB,EAAKf,IAAMO,EAAMiB,GAAGxB,IAC/C,EAAKmB,SAASd,GACdoB,MAAM,cAA2B,GAAblB,EAAMS,UApF9B,EAAKF,MAAQT,EAFH,EAoGb,OAtHGM,EAEJe,kBAAA,WACEC,YAAYC,KAAKhB,UAAWgB,KAAKd,MAAMJ,OACvCmB,SAASC,UAAYF,KAAKP,gBAC1BQ,SAASE,MAAQ,aACjBC,OAAOC,iBAAiB,WAAW,SAASC,GACvC,CAAC,QAAQ,UAAU,YAAY,YAAY,cAAcC,QAAQD,EAAEE,OAAS,GAC3EF,EAAEG,oBAEP,IACJ,EAEDC,mBAAA,WACEV,KAAKL,cACLK,KAAKW,WAMJ,EA0BFA,QAAA,WACC,IAtEqB7B,EAsEjBG,GAAS,OAAQe,KAAKd,MAAMP,OAC5BQ,EAAI,iBAASF,EAAUA,EAAUG,OAAO,IACxCR,EAAOoB,KAAKd,MAAMN,KACjBO,EAAKnB,IAAMY,EAAKZ,GAAMmB,EAAKf,IAAMQ,EAAKR,IACvCa,EAAUI,KAAKF,GACfa,KAAKT,SAAS,CACVZ,MAAOM,EACPL,KAAMb,IACNe,OA9EaA,EA8EQkB,KAAKd,MAAMJ,MA9ETA,EAAQ,IAAKA,EAAQ,SAiFpD,EAgCFU,OAAA,WACE,IAAIoB,EAAUvC,IACd2B,KAAKd,MAAMP,MAAMkC,SAAQ,SAAAC,GAAO,OAAIF,EAAQE,EAAQ9C,GAAG8C,EAAQ1C,GAAK,WACpEwC,EAAQZ,KAAKd,MAAMN,KAAKZ,GAAGgC,KAAKd,MAAMN,KAAKR,GAAK,OAChD4B,KAAKT,SAAS,CAACb,KAAMkC,KACtB,EAaCG,OAAA,WACE,IAAMC,EAAchB,KAAKd,MAAMR,KAAKH,KAAI,SAAC0C,EAAKrB,GAAN,OAAYqB,EAAI1C,KAAI,SAAC2C,EAAOC,GAAR,OAAe,uBAAKC,KAASxB,EAAL,IAAUuB,EAAKE,UAAWH,UAC9G,OAEQ,uBAAKG,UAAU,mBACX,uBAAKA,UAAU,QAAQL,KAIpC,EAtHGjC,CAAYuC,EAAAA,WA0HH,SAASC,IACtB,OAEE,uBAAKC,MAAM,+EACb,uBAAKA,MAAM,IACT,uBAAKA,MAAM,qHACX,sBAAIA,MAAM,kDAAV,cACE,sBAAIA,MAAM,0DAAV,oCACA,sBAAIA,MAAM,0DAAV,oDACA,uBAAKA,MAAM,0CACT,gBAACzC,EAAD","sources":["webpack://gatsby-starter-hello-world/./src/pages/index.js"],"sourcesContent":["import React, {Component}from  \"react\"\r\nimport '../styles/global.css'\r\nimport '../styles/grid.css';\r\n\r\nconst LEFT  = 37; \r\nconst UP    = 38;\r\nconst RIGHT = 39; \r\nconst DOWN  = 40;\r\nconst STOP  = 32;\r\n\r\nconst  HEIGHT = 10;\r\nconst  WIDTH  = 10;\r\n\r\nconst increaseSpeed = (speed) => speed - 10 *(speed > 10)\r\n\r\n\r\nconst getRandom = () => {\r\n  return  { \r\n      x: Math.floor(Math.random() *WIDTH),\r\n      y: Math.floor(Math.random() *HEIGHT) \r\n  }\r\n}\r\n\r\nconst emptyRows = () =>  [...Array(WIDTH)].map((_) =>\r\n                         [...Array(HEIGHT)].map((_)=> 'grid-item'));\r\n\r\nconst initialState = {\r\n  rows: emptyRows(),\r\n  snake: [getRandom()],\r\n  food: getRandom(),\r\n  direction: STOP,\r\n  speed: 100,\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.changeDirection;\r\n    document.title = \"snake-game\";\r\n    window.addEventListener(\"keydown\", function(e) {\r\n      if([\"Space\",\"ArrowUp\",\"ArrowDown\",\"ArrowLeft\",\"ArrowRight\"].indexOf(e.code) > -1) {\r\n          e.preventDefault();\r\n      }\r\n  }, false);\r\n}\r\n\r\ncomponentDidUpdate() {\r\n  this.isCollapsed();\r\n  this.isEaten();\r\n}\r\n\r\n  constructor() {\r\n      super();\r\n      this.state = initialState;\r\n  }\r\n  \r\n  moveSnake = () => {\r\n    let snakeCopy = [...this.state.snake];\r\n    let head  =  {...snakeCopy[snakeCopy.length-1]};\r\n    switch (this.state.direction) {\r\n        case LEFT:  head.y += -1; break;    \r\n        case UP:    head.x += -1; break;\r\n        case RIGHT: head.y += 1;  break;\r\n        case DOWN:  head.x += 1;  break;\r\n        default: return;\r\n    }\r\n    /* keep the value within range of 0 to HEIGHT */\r\n    head.x += HEIGHT * ((head.x<0)-(head.x>=HEIGHT));\r\n    head.y += WIDTH * ((head.y<0)-(head.y>=WIDTH));\r\n  \r\n    snakeCopy.push(head); \r\n    snakeCopy.shift()\r\n    this.setState({\r\n        snake: snakeCopy,\r\n        head: head\r\n    });\r\n    this.update(); \r\n  } \r\n  \r\n\r\n isEaten() {\r\n  let snakeCopy  = [...this.state.snake];\r\n  let head  =  {...snakeCopy[snakeCopy.length-1]};\r\n  let food = this.state.food;\r\n  if ((head.x === food.x) &&(head.y === food.y)) {\r\n      snakeCopy.push(head);\r\n      this.setState({\r\n          snake: snakeCopy,\r\n          food: getRandom(),\r\n          speed: increaseSpeed(this.state.speed) \r\n      });\r\n  } \r\n }\r\n\r\n\r\n\r\n\r\n changeDirection = ({keyCode}) => { \r\n  let direction = this.state.direction;\r\n  switch (keyCode) {\r\n      case LEFT:\r\n          direction = (direction === RIGHT)? RIGHT: LEFT;\r\n          break;\r\n      case RIGHT:\r\n          direction = (direction === LEFT)? LEFT: RIGHT;\r\n          break;\r\n      case UP:\r\n          direction = (direction === DOWN)? DOWN: UP;\r\n          break;\r\n      case DOWN:\r\n          direction = (direction === UP)? UP: DOWN;\r\n          break;\r\n      case STOP:\r\n          direction = STOP;\r\n          break;\r\n      default:\r\n          break;\r\n  }\r\n  this.setState({\r\n      direction: direction\r\n  });\r\n}    \r\n\r\n\r\nupdate() {\r\n  let newRows = emptyRows(); \r\n  this.state.snake.forEach(element => newRows[element.x][element.y] = 'snake')\r\n  newRows[this.state.food.x][this.state.food.y] = 'food';\r\n  this.setState({rows: newRows});\r\n}\r\n\r\nisCollapsed = () => {\r\n  let snake = this.state.snake;\r\n  let head  = {...snake[snake.length-1]} \r\n  for (let i=0; i<snake.length-3; i++) {\r\n      if ((head.x === snake[i].x) &&(head.y === snake[i].y)) {\r\n          this.setState(initialState);\r\n          alert(`game over: ${snake.length*10}`)\r\n      }\r\n  }\r\n}\r\n  \r\n  render() {\r\n    const displayRows = this.state.rows.map((row, i) => row.map((value, j) =>  <div name={`${i}=${j}`} className={value} />))\r\n    return (\r\n       \r\n            <div className=\"snake-container\">\r\n                <div className=\"grid\">{displayRows}</div>\r\n            </div>\r\n        \r\n    )    \r\n  }\r\n}\r\n\r\n\r\nexport default function Home() {\r\n  return (\r\n   \r\n    <div class=\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center mx-auto sm:py-12\">\r\n  <div class=\"\">\r\n    <div class=\"h-auto py-20 px-10 w-2/3 bg-indigo-500 flex flex-col space-y-5 mx-auto rounded-3xl shadow-xl transition-transform\">\r\n    <h1 class=\" font-medium text-white text-4xl tracking-wide\">Snake Game</h1>\r\n      <h2 class=\"font-normal tracking-wide text-2xl text-white lg:w-2/5\">press \"space\" to pause the game.</h2>\r\n      <h2 class=\"font-normal tracking-wide text-2xl text-white lg:w-2/5\">press \"arrow keys\" to change direction/ unpause.</h2>\r\n      <div class=\"grid grid-css grid-rows-2 grid-cols-2 \">\r\n        <App />\r\n        </div>\r\n      \r\n    </div>\r\n  </div>\r\n</div>\r\n    \r\n    );\r\n}\r\n"],"names":["getRandom","x","Math","floor","random","y","emptyRows","Array","map","_","initialState","rows","snake","food","direction","speed","App","moveSnake","snakeCopy","state","head","length","push","shift","setState","update","changeDirection","keyCode","isCollapsed","i","alert","componentDidMount","setInterval","this","document","onkeydown","title","window","addEventListener","e","indexOf","code","preventDefault","componentDidUpdate","isEaten","newRows","forEach","element","render","displayRows","row","value","j","name","className","Component","Home","class"],"sourceRoot":""}